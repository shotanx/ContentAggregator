// <auto-generated />
using System;
using ContentAggregator.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ContentAggregator.Infrastructure.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250403211701_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ContentAggregator.Core.Entities.Feature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstNameEng")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstNameGeo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastNameEng")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastNameGeo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Feature");
                });

            modelBuilder.Entity("ContentAggregator.Core.Entities.YTChannel", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<byte>("ActivityLevel")
                        .HasColumnType("smallint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("LastPublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TitleKeywords")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("YTChannel");
                });

            modelBuilder.Entity("ContentAggregator.Core.Entities.YoutubeContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalComments")
                        .HasColumnType("text");

                    b.Property<string>("ChannelId")
                        .IsRequired()
                        .HasColumnType("character varying(100)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("FbPosted")
                        .HasColumnType("boolean");

                    b.Property<bool>("FbPostedStatus")
                        .HasColumnType("boolean");

                    b.Property<bool>("NotRelevant")
                        .HasColumnType("boolean");

                    b.Property<string>("SubtitlesEngSRT")
                        .HasColumnType("text");

                    b.Property<string>("SubtitlesFiltered")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VideoId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeSpan>("VideoLength")
                        .HasColumnType("interval");

                    b.Property<DateTimeOffset>("VideoPublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VideoSummaryEng")
                        .HasColumnType("text");

                    b.Property<string>("VideoSummaryGeo")
                        .HasColumnType("text");

                    b.Property<string>("VideoTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.ToTable("YoutubeContent");
                });

            modelBuilder.Entity("ContentAggregator.Core.Entities.YoutubeContentFeature", b =>
                {
                    b.Property<int>("FeatureId")
                        .HasColumnType("integer");

                    b.Property<int>("YoutubeContentId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("FeatureId", "YoutubeContentId");

                    b.HasIndex("YoutubeContentId");

                    b.ToTable("YoutubeContentFeature");
                });

            modelBuilder.Entity("ContentAggregator.Core.Entities.YoutubeContent", b =>
                {
                    b.HasOne("ContentAggregator.Core.Entities.YTChannel", "YTChannel")
                        .WithMany("YoutubeContents")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("YTChannel");
                });

            modelBuilder.Entity("ContentAggregator.Core.Entities.YoutubeContentFeature", b =>
                {
                    b.HasOne("ContentAggregator.Core.Entities.Feature", null)
                        .WithMany("YoutubeContentFeatures")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContentAggregator.Core.Entities.YoutubeContent", null)
                        .WithMany("YoutubeContentFeatures")
                        .HasForeignKey("YoutubeContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContentAggregator.Core.Entities.Feature", b =>
                {
                    b.Navigation("YoutubeContentFeatures");
                });

            modelBuilder.Entity("ContentAggregator.Core.Entities.YTChannel", b =>
                {
                    b.Navigation("YoutubeContents");
                });

            modelBuilder.Entity("ContentAggregator.Core.Entities.YoutubeContent", b =>
                {
                    b.Navigation("YoutubeContentFeatures");
                });
#pragma warning restore 612, 618
        }
    }
}
